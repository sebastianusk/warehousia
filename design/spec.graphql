type Query {
  admins(query: String, offset: Int, limit: Int): [Admin]
  adminLogs(username: String, offset: Int, limit: Int): [AdminLog]
  me: Admin
  warehouses(query: String, offset: Int, limit: Int): [Warehouse]
  shops(query: String, pagination: PaginationInput): ShopList
  products(warehouseId: String!, query: String, limit: Int, offset: Int): [Product]
  productStock(productId: String!): ProductStock
  searchProduct(query: String, limit: Int, offset: Int): [ProductAutoFill]
  productLog(productId: String, limit: Int, offset: Int): [ProductLog!]
  outbounds(warehouseId: String!, shopId: String!): [Outbound]
  demands(warehouseId: String, shopId: String, limit: Int, offset: Int): [Demand]
  preparations(query: String, warehouseId: String): PreparationList
  transactions(productId: String, warehouseId: String, shopId: String, pagination: PaginationInput): TransactionList
  inbounds(warehouseId: String!, pagination: PaginationInput): InboundList
  transfers(warehouseId: String!, destinationId: String!, pagination: PaginationInput): TransferList
}


# Mutation
type Mutation {
  login(username: String!, password: String!): SessionPayload
  addAdmin(input: AddAdminInput): AdminPayload
  editAdmin(input: EditAdminInput): AdminPayload
  changeMyPassword(input: ChangeMyPasswordInput): AdminPayload

  addWarehouse(input: AddWarehouseInput): IdPayload
  editWarehouse(input: EditWarehouseInput): IdPayload

  addShop(input: AddShopInput): IdPayload
  editShop(input: EditShopInput): IdPayload

  addProducts(input: [ProductInput]): CountPayload
  editProduct(input: ProductInput): IdPayload
  editProductStock(input: StockProductInput): IdPayload

  addOutbound(warehouseId: String!, shopId: String!, items: [ProductAmountInput]!): OutboundResponse
  addPreparation(warehouseId: String!, shopId: [String]!): IdPayload
  addMissing(preparationId: String!, productId: String!, amount: Int!): IdPayload
  addTransaction(preparationId: String!, remarks: String): TransactionResponse

  addInbound(warehouseId: String!, items: [ProductAmountInput]!): IdPayload
  addTransfer(warehouseId: String!, destinationId: String!, items: [ProductAmountInput]!): IdPayload
}


# Generic Utils Object
input PaginationInput {
  offset: Int
  limit: Int
}

type IdPayload {
  id: String!
}

type CountPayload {
  count: Int!
}

input IdInput {
  id: String!
}

# Admin Objects
input AddAdminInput {
  username: String!
  password: String!
  role: Role!
  warehouse: [String]
}

input EditAdminInput {
  username: String!
  role: Role
  warehouses: [String]
  active: Boolean
  password: String
}

input ChangeMyPasswordInput {
  oldPassword: String!
  newPassword: String!
}

type AdminList {
  data: [Admin]
}

type AdminPayload {
  username: String!
}

type SessionPayload {
  session: String!
}

type Admin {
  username: String!
  role: Role!
  warehouses: [String]!
  active: Boolean!
  createdAt: String!
  updatedAt: String!
}

enum Role {
  ADMIN
  SUPER_ADMIN
}

type AdminLogList {
  data: [AdminLog]
}

type AdminLog {
  id: String!
  action: String!
  createdAt: String!
  remarks: String
}


# Product Objects
type ProductStock {
  id: String!
  name: String!
  price: Int!
  createdAt: String!
  updatedAt: String!
  stocks: [ProductStockAmount]
}

type ProductStockAmount {
  warehouseId: String!
  amount: Int!
}

type ProductList {
  data: [Product]
}

type Product {
  id: String!
  name: String!
  price: Int!
  stock: Stock!
  createdAt: String!
  updatedAt: String!
}

type ProductAutoFillList {
  data: [ProductAutoFill]!
}

type ProductAutoFill {
  id: String!
  name: String!
}

type Stock {
  amount: Int!
  all:Int!
  topWarehouse: String!
  topAmount: Int!
  updatedAt: String!
}

type ProductLogList {
  data: [ProductLog]
}

type ProductLog {
  id: String!
  warehouse: String!
  amount: Int!
  createdAt: String!
  createdBy: String!
  action: String!
  remarks: String
}

input ProductInput {
  id: String!
  name: String
  price: Int
}

input StockProductInput {
  id: String!
  warehouse: String!
  stock: Int!
}

type ProductAmount {
  id: String!
  product: String!
  amount: Int!
}

input ProductAmountInput {
  productId: String!
  amount: Int!
}

# Shop Object
type ShopList {
  data: [Shop]
}

type Shop {
  id: String!
  name: String!
  active: Boolean!
  createdAt: String!
  updatedAt: String!
}

input AddShopInput {
  id: String!
  name: String!
}

input EditShopInput {
  id: String!
  name: String
  active: Boolean
}


# Warehouse Object
type WarehouseList {
  data: [Warehouse]
}

type Warehouse {
  id: String!
  name: String!
  active: Boolean!
  features: [String]
  createdAt: String!
  updatedAt: String!
}

input AddWarehouseInput {
  id: String!
  name: String!
  features: [String]
}

input EditWarehouseInput {
  id: String!
  name: String
  features: [String]
  active: Boolean
}

# Outbound Objects
type OutboundList {
  data: [Outbound]!
}

type Outbound {
  id: String!
  createdAt: String!
  createdBy: String!
  shopId: String!
  warehouseId: String!
  productId: String!
  amount: Int!
}

type OutboundResponse {
  outbounds: [IdPayload]!
  demands: [IdPayload]
}

type DemandList {
  data: [Demand]!
}

type Demand {
  id: String!
  warehouseId: String!
  shopId: String!
  productId: String
  amount: Int!
  createdAt: String!
  createdBy: String!
}

type PreparationList {
  data: [Preparation]
}

type Preparation {
  id: String!
  warehouseId: String!
  createdBy: String!
  createdAt: String!
  items: [PreparationItem]
}

type PreparationItem {
  productId: String!
  expected: Int!
  actual: Int!
}

input AddMissingInput {
  preparationId: String!
  productId: String!
  missingAmount: Int!
}

input AddTransactionInput {
  preparationId: String!
}

type TransactionResponse {
  data: [IdPayload]
  failed: [ShopFailed]
}

type ShopFailed {
  shopId: String!
  items: [ProductFailed]
}

type ProductFailed {
  productId: String!
  amount: Int!
}

type TransactionList {
  data: [Transaction]
}

type Transaction {
  id: String!
  shopId: String!
  warehouseId: String!
  productId: String!
  amount: Int!
  createdAt: String!
  createdBy: String!
}


# Inbound Objects
type InboundList {
  data: [Inbound]
}

type Inbound {
  id: String!
  warehouse: String!
  items: [ProductAmount]
  createdAt: String!
  createdBy: String!
}

# Transfers Objects
type TransferList {
  data: [Transfer]
}

type Transfer {
  id: String!
  source: String!
  destination: String!
  items: [ProductAmount]
  createdAt: String!
  createdBy: String!
}
