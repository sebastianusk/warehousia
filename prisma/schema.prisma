// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model admin {
  username   String      @id
  password   String
  role       String
  warehouses warehouse[] @relation("admin_access")
  active     Boolean     @default(true)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  logs       adminlog[]
}

model adminlog {
  id            String   @id @default(uuid())
  username      String
  adminUsername admin    @relation(fields: [username], references: [username])
  created_at    DateTime @default(now())
  action        String
  remarks       Json?
}

model warehouse {
  id         String   @id
  name       String
  active     Boolean  @default(true)
  features   String[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  admin      admin[]  @relation("admin_access")
  stock      stock[]
}

model shop {
  id         String   @id
  name       String
  active     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model product {
  id            String          @id
  name          String
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  stock         stock[]
  inbound_item  inbound_item[]
  transfer_item transfer_item[]
}

model stock {
  id           String     @id @default(uuid())
  product      product    @relation(fields: [product_id], references: [id])
  product_id   String
  warehouse    warehouse  @relation(fields: [warehouse_id], references: [id])
  warehouse_id String
  stock        Int
  updated_at   DateTime   @updatedAt
  logs         stocklog[]

  @@unique([product_id, warehouse_id])
}

model stocklog {
  id         String   @id @default(uuid())
  action     String
  amount     Int
  stock      stock    @relation(fields: [stock_id], references: [id])
  stock_id   String
  created_at DateTime @default(now())
  created_by String
  remarks    Json?
}

model inbound {
  id           String         @id @default(uuid())
  warehouse    String
  created_by   String
  created_at   DateTime       @default(now())
  inbound_item inbound_item[]
}

model inbound_item {
  id         String  @id @default(uuid())
  inbound    inbound @relation(fields: [inbound_id], references: [id])
  product    product @relation(fields: [product_id], references: [id])
  amount     Int
  inbound_id String
  product_id String
}

model transfer {
  id            String          @id @default(uuid())
  warehouse     String
  destination   String
  created_by    String
  created_at    DateTime        @default(now())
  transfer_item transfer_item[]
}

model transfer_item {
  id          String   @id @default(uuid())
  transfer    transfer @relation(fields: [transfer_id], references: [id])
  product     product  @relation(fields: [product_id], references: [id])
  amount      Int
  transfer_id String
  product_id  String
}

model outbound {
  id         String          @id @default(uuid())
  item       outbound_item[]
  created_by String
  demand     demand[]
}

model outbound_item {
  id             String       @id @default(uuid())
  product_id     String
  warehouse_id   String
  shop_id        String
  amount         Int
  outbound       outbound     @relation(fields: [outbound_id], references: [id])
  preparation    preparation? @relation(fields: [preparation_id], references: [id])
  created_at     DateTime     @default(now())
  outbound_id    String
  preparation_id String?
  demand         demand?      @relation
  missing        missing?     @relation
}

model preparation {
  id          String          @id @default(uuid())
  created_at  DateTime        @default(now())
  created_by  String
  outbound    outbound_item[]
  transaction transaction[]
}

model demand {
  id                    String         @id @default(uuid())
  product_id            String
  warehouse_id          String
  shop_id               String
  amount                Int
  outbound              outbound       @relation(fields: [outbound_id], references: [id])
  outbound_id           String
  fulfiled_at           DateTime?
  input_type            String?
  input_id              String?
  fulfiled_outbound     outbound_item? @relation(fields: [outbound_item_id], references: [id])
  outbound_item_id      String?
  previous_demand       demand?        @relation("child_demand")
  unfulfilled_demand    demand?        @relation("child_demand", fields: [unfulfilled_demand_id], references: [id])
  unfulfilled_demand_id String?
}

model missing {
  id               String        @id @default(uuid())
  outbound_item    outbound_item @relation(fields: [outbound_item_id], references: [id])
  outbound_item_id String
  product_id       String
  missing          Int
  created_at       DateTime      @default(now())
  created_by       String
}

model transaction {
  id             String      @id @default(uuid())
  product_id     String
  warehouse_id   String
  shop_id        String
  amount         Int
  preparation    preparation @relation(fields: [preparation_id], references: [id])
  preparation_id String
  remarks        Json
}
