openapi: 3.0.3
info:
  contact:
    name: example
    url: example
    email: example@example.com
  description: "API for warehousia application"
  version: 0.0.1
  title: Warehousia API
tags:
  - name: account
    description: Everything about the admins
  - name: warehouse
    description: The warehouse group, where you store your product
  - name: shop
    description: The shop group, it is where we sell the product
  - name: product
    description: The detail about the product
  - name: inbound
    description: Action where the product getting into the warehouse
  - name: transfer
    description: Action where the product moved from one warehouse to others
  - name: outbound
    description: Action where the product is planned to getting out from the warehouse
  - name: preparation
    description: Action where the product is prepared to leave the warehouse
  - name: transaction
    description: Action where product sold to the shop
paths:
  /login:
    post:
      tags:
        - account
      summary: Login API
      description: "API for login"
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: successfully login
        "401":
          $ref: "#/components/responses/Unauthorized"

  /accounts:
    post:
      tags:
        - account
      summary: Create Admin
      description: "to create a new admin account"
      operationId: create-admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                role:
                  type: string
                warehouse:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: successfully create admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
        "422":
          $ref: "#/components/responses/UnprocessableEntities"
        "401":
          $ref: "#/components/responses/Unauthorized"

    get:
      operationId: get-admins
      tags:
        - account
      summary: Get Admin List
      description: Get All Admin list by super admin
      responses:
        "200":
          description: successfully get all admin
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Admin"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntities"

  /accounts/me:
    get:
      operationId: get-my-admin
      summary: Get My Admin data
      description: Get My Admin
      tags:
        - account
      responses:
        "200":
          description: Successfully get admin by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"

  /accounts/me/password:
    patch:
      operationId: change-my-password
      description: change logged in admin's password
      summary: Change My Password
      tags:
        - account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        "200":
          description: successfully change my password
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntities"

  /accounts/{username}:
    get:
      operationId: get-admin-id
      parameters:
        - $ref: "#/components/parameters/username"
      summary: Get Admin by ID
      description: Get Admin by ID
      tags:
        - account
      responses:
        "200":
          description: Successfully get admin by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"

    patch:
      operationId: edit-admin
      parameters:
        - $ref: "#/components/parameters/username"
      tags:
        - account
      summary: Edit Admin by ID
      description: Edit admin by ID
      requestBody:
        $ref: "#/components/requestBodies/EditAdmin"
      responses:
        "200":
          description: successfully edit admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntities"

    delete:
      parameters:
      - $ref: "#/components/parameters/username"
      tags:
        - account
      operationId: delete-admin
      summary: Delete an Admin by ID
      description: Delete an Admin by ID
      responses:
        "200":
          description: successfully delete admin
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntities"

  /accounts/{username}/log:
    get:
      summary: Get Admin Log
      description: Get Admin Log
      operationId: admin-log
      tags:
        - account
      parameters:
        - $ref: "#/components/parameters/username"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pagesize"
      responses:
        "200":
          description: successfully get admin log
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminLog"




  /accounts/{username}/password:
    patch:
      operationId: change-others-password
      parameters:
        - $ref: "#/components/parameters/username"
      description: change admin password by ID
      summary: Change Admin Password by ID
      tags:
        - account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: successfully change other admin password
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntities"


  /warehouse:
    post:
      operationId: create-warehouse
      tags:
        - warehouse
      summary: Create Warehouse
      description: Create new warehouse
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                features:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: successfully create warehouse
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntities"
    get:
      summary: Get Warehouse List
      operationId: warehouse-list
      description: Get list of warehouse
      tags:
        - warehouse
      responses:
        "200":
          description: successfully get list of warehouse
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Warehouse"

  /warehouse/{warehouseid}:
    get:
      summary: Get Warehouse by ID
      description: Get warehouse by ID
      operationId: get-warehouse-id
      parameters:
        - $ref: "#/components/parameters/warehouseid"
      tags:
        - warehouse
      responses:
        "200":
          description: successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Warehouse"

    patch:
      summary: Edit Warehouse Data
      description: Edit Warehouse Data
      operationId: edit-warehouse
      tags:
        - warehouse
      parameters:
        - $ref: "#/components/parameters/warehouseid"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                features:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: Successfully edit warehouse data
    delete:
      summary: Delete Warehouse
      description: Delete warehouse
      operationId: delete-warehouse
      tags:
        - warehouse
      parameters:
        - $ref: "#/components/parameters/warehouseid"
      responses:
        "200":
          description: Successfully delete warehouse data

  /shop:
    post:
      summary: Create new shop
      description: Create new shop
      tags:
        - shop
      operationId: create-shop
      requestBody:
        content:
          appilcation/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        "200":
          description: Successfully create shop
    get:
      summary: Get all shop
      description: Get all shop
      tags:
        - shop
      operationId: get-all-shop
      responses:
        "200":
          description: Successfully get all shop
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Shop"

  /shop/{shopid}:
    get:
      summary: Get Shop by ID
      description: Get Shop by ID
      tags:
        - shop
      operationId: get-shop-id
      parameters:
        - $ref: "#/components/parameters/shopid"
      responses:
        "200":
          description: Successfully get shop by ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Shop"

    patch:
      summary: Edit Shop by ID
      description: Edit Shop by ID
      parameters:
        - $ref: "#/components/parameters/shopid"
      tags:
        - shop
      operationId: edit-shop
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        "200":
          description: Successfuly edit shop by ID

    delete:
      summary: Delete Shop by ID
      description: Delete Shop by ID
      parameters:
        - $ref: "#/components/parameters/shopid"
      tags:
        - shop
      operationId: delete-shop
      responses:
        "200":
          description: Successfully delete shop by ID

  /product:
    post:
      summary: Create Products in bulk
      description: Create Product in bulk
      tags:
        - product
      operationId: create-product
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  price:
                    type: string
      responses:
        "200":
          description: Successfully create product
    get:
      summary: Get List Product
      description: Get List Product
      tags:
        - product
      operationId: list-product
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pagesize"
        - $ref: "#/components/parameters/queryproduct"
        - $ref: "#/components/parameters/warehouse-location"
      responses:
        "200":
          description: Successfully get product list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
  /product/{productid}:
    patch:
      summary: Edit Product By ID
      description: Edit Product by ID
      tags:
        - product
      parameters:
        - $ref: "#/components/parameters/productid"
      operationId: edit-product
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: string
      responses:
        "200":
          description: Successfully edit product

  /product/{productid}/log:
    get:
      summary: Get Product Log
      description: Get Product Log
      operationId: product-log
      tags:
        - product
      parameters:
        - $ref: "#/components/parameters/productid"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pagesize"
      responses:
        "200":
          description: Successfully get product log
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductLog"

  /product/{productid}/stock/{warehouseid}:
    get:
      summary: Get Product detail by location
      description: Get Product detail by location
      tags:
        - product
      parameters:
        - $ref: "#/components/parameters/productid"
        - $ref: "#/components/parameters/warehouseid"
      operationId: get-product-id
      responses:
        "200":
          description: Successfully get product ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"

    patch:
      summary: Edit Product Stock by warehouseid
      description: Edit Product Stock by warehouseid
      operationId: edit-stock
      tags:
        - product
      parameters:
        - $ref: "#/components/parameters/productid"
        - $ref: "#/components/parameters/warehouseid"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
      responses:
        "200":
          description: Successfully edit stock

  /inbounds:
    post:
      summary: Create new inbound
      description: Create new inbound
      operationId: create-inbound
      tags:
        - inbound
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                warehouse:
                  type: string
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      productCode:
                        type: string
                      amount:
                        type: integer
      responses:
        "200":
          description: Successfully create inbound

  /transfer:
    post:
      summary: Create transfer warehouse
      description: Create transfer warehouse
      operationId: create-transfer
      tags:
        - transfer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                source:
                  type: string
                destination:
                  type: string
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      productCode:
                        type: string
                      amount:
                        type: integer
      responses:
        "200":
          description: Successfully create transfer

  /outbounds:
    post:
      summary: Create outbound
      description: Create outbound
      tags:
        - outbound
      operationId: create-outbound
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                warehouse:
                  type: string
                shop:
                  type: string
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      productCode:
                        type: string
                      amount:
                        type: integer
      responses:
        "200":
          description: Successfully create new outbound
    get:
      summary: Get created outbound
      description: Get created outbound
      tags:
        - outbound
      parameters:
        - $ref: "#/components/parameters/warehouse-location"
        - $ref: "#/components/parameters/shop-target"
      operationId: get-outbound
      responses:
        "200":
          description: Successfully get created outbound
          content:
            application/json:
              schema:
                type: array
                properties:
                  outoundId:
                    type: string
                  productCode:
                    type: string
                  amount:
                    type: string
                  shopId:
                    type: string
  /preparation:
    post:
      summary: Create preparation
      description: Create preparation
      operationId: create-preparation
      tags:
        - preparation
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  outboundId:
                    type: string
      responses:
        "200":
          description: Successfully create preparation
          content:
            application/json:
              schema:
                type: object
                properties:
                  preparationId:
                    type: string

  /preparation/{preparationid}:
    get:
      summary: Get preparation item
      description: Get preparation item
      operationId: get-preparation
      tags:
        - preparation
      parameters:
        - $ref: "#/components/parameters/preparationid"
        - $ref: "#/components/parameters/warehouse-location"
        - $ref: "#/components/parameters/queryproduct"
      responses:
        "200":
          description: Successfully get expected preparation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    wareshouse:
                      type: string
                    shop:
                      type: string
                    productCode:
                      type: string
                    amount:
                      type: integer

  /preparation/{preparationid}/{productid}/missing:
    post:
      summary: Create missing preparation
      description: Create missing preparation
      tags:
        - preparation
      operationId: missing-preparation
      parameters:
        - $ref: "#/components/parameters/preparationid"
        - $ref: "#/components/parameters/productid"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
      responses:
        "200":
          description: successfully create missing preparation

  /transaction:
    post:
      summary: Create new preparation
      description: Create new preparation
      tags:
        - transaction
      operationId: create-transaction
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                preparationId:
                  type: string
      responses:
        "200":
          description: sucessfully create transaction

servers:
  - url: https://petstore.swagger.io/v2
components:
  requestBodies:
    EditAdmin:
      content:
        application/json:
          schema:
            type: object
            properties:
              role:
                type: string
              warehouse:
                type: array
                items:
                  type: string

  responses:
    UnprocessableEntities:
      description: failed to process one of the field
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                field:
                  type: string
                error:
                  type: string
    Unauthorized:
      description: access not allowed

  parameters:
    page:
      name: page
      description: page number
      in: query
      schema:
        type: number

    pagesize:
      name: pagesize
      description: page size
      in: query
      schema:
        type: number

    queryproduct:
      name: querystring
      description: product query string
      in: query
      schema:
        type: string

    productid:
      name: productid
      description: product id
      in: path
      required: true
      schema:
        type: string

    warehouse-location:
      name: location
      description: location of the warehouse
      in: query
      required: true
      schema:
        type: string

    shop-target:
      name: shop
      description: target of the outbound
      in: query
      required: true
      schema:
        type: string

    preparationid:
      name: preparationid
      description: id of the preparation
      in: path
      required: true
      schema:
        type: string

    username:
      name: username
      required: true
      description: username of the admin
      in: path
      schema:
        type: string

    warehouseid:
      name: warehouseid
      required: true
      description: id of the warehouse
      in: path
      schema:
        type: string

    shopid:
      name: shopid
      required: true
      description: id of the shop
      in: path
      schema:
        type: string


  schemas:
    Admin:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        role:
          type: string
        warehouse:
          type: array
          items:
            type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    AdminLog:
      type: object
      properties:
        id:
          type: string
        action:
          type: string
        remarks:
          type: string
        createdAt:
          type: string
          format: date

    Warehouse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        features:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
    Shop:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date

    Product:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        price:
          type: integer
        stock:
          $ref: "#/components/schemas/ProductStock"

    ProductStock:
      type: object
      properties:
        inLocation:
          type: integer
        allLocation:
          type: integer
        topLocation:
          type: object
          properties:
            location:
              type: string
            stock:
              type: integer

    ProductLog:
      type: object
      properties:
        id:
          type: string
        action:
          type: string
        mutation:
          type: integer
        stock:
          type: integer
        remarks:
          type: string
        createdBy:
          type: string
        createdAt:
          type: string
